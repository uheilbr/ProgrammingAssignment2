makeCacheMatrix <- function(x = matrix()) {
m <- NULL		# 'm' is assigned thr NULL object, i.e. undefined
set <- function(y) {
x <<- y		# 'x' is superassigned the argument of the set function, i.e. in the global environment
m <<- NULL		# 'm' is assigned thr NULL object, i.e. undefined
}
get <- function() x				# the 'get' function returns the matrix argument of the 'makeCacheMatrix' function
setinv <- function(solve) m <<- solve	# the 'setinv' function calculates the inverse of the input matrix in the global environment
getinv <- function() m			# the 'getinv' function stores the inverse of the input matrix
list(set = set, get = get,			# makes a list object containing the four functions mentioned above, this is the object which the
setinv = setinv,			# function 'makeCacheMatrix' returns
getinv = getinv)
}
makeCacheMatrix
cacheSolve <- function(x, ...) {
m <- x$getinv()					# here, m is assigned the value stored by the getinv() function contained in the return value of the 								# makeCacheMatrix() function
if(!is.null(m)) {				# if the value was previously defined (i.e. not NULL), the function returns the stored value of m and exits
message("getting cached data")
return(m)
}						# otherwise, i.e. if the value of m was NULL (not defined):
data <- x$get()				# 'data' is assigned the get function
m <- solve(data, ...)			# 'm' isassigned the inverse
x$setinv(m)
m		# Return a matrix that is the inverse of 'x'
}
ls()
u <- matrix(c(1,2,3,11,12,13,4,5,6, 11,23,22,32,33,45,32), nrow = 4, ncol = 4
)
u
cachesolve(u)
cacheSolve(u)
x$getinv()
ls()
makeCacheMatrix(u)
cacheSolve(u)
u
makeCacheMatrix(u)
cacheSolve <- function(x=matrix(), ...) {
m <- x$getinv()					# here, m is assigned the value stored by the getinv() function contained in the return value of the 								# makeCacheMatrix() function
if(!is.null(m)) {				# if the value was previously defined (i.e. not NULL), the function returns the stored value of m and exits
message("getting cached data")
return(m)
}						# otherwise, i.e. if the value of m was NULL (not defined):
data <- x$get()				# 'data' is assigned the get function
m <- solve(data, ...)			# 'm' isassigned the inverse
x$setinv(m)
m		# Return a matrix that is the inverse of 'x'
}
cacheSolve(u)
x$getinv
cacheSolve <- function(x, ...) {
m <- x$getinv					# here, m is assigned the value stored by the getinv() function contained in the return value of the 								# makeCacheMatrix() function
if(!is.null(m)) {				# if the value was previously defined (i.e. not NULL), the function returns the stored value of m and exits
message("getting cached data")
return(m)
}						# otherwise, i.e. if the value of m was NULL (not defined):
data <- x$get()				# 'data' is assigned the get function
m <- solve(data, ...)			# 'm' isassigned the inverse
x$setinv(m)
m		# Return a matrix that is the inverse of 'x'
}
cacheSolve(u)
makeVector
function(x = numeric()) {
m <- NULL
set <- function(y) {
x <<- y
m <<- NULL
}
get <- function() x
setmean <- function(mean) m <<- mean
getmean <- function() m
list(set = set, get = get,
setmean = setmean,
getmean = getmean)
}
ls()
makeVector <- function(x = numeric()) {
m <- NULL
set <- function(y) {
x <<- y
m <<- NULL
}
get <- function() x
setmean <- function(mean) m <<- mean
getmean <- function() m
list(set = set, get = get,
setmean = setmean,
getmean = getmean)
}
makeVector
makeVector()
cachemean <- function(x, ...) {
m <- x$getmean()
if(!is.null(m)) {
message("getting cached data")
return(m)
}
data <- x$get()
m <- mean(data, ...)
x$setmean(m)
m
}
cachemean()
cacheSolve(u)
u
class(u)
mode(u)
cachemean(c(1,2,3,4))
v<-c(1,2,3,4)
cachemean(v)
v
makeVector()
cachemean(v)
a<-makeVector(c(1,2,3,4))
cachevector(a)
cachemean(a)
a$setmean
a$getmean
a$get
cacheSolve(v)
v
v<-matrix(c(1,3,7,8), nrow=2,ncol=2)
v
cacheSolve(v)
v
makecacheMatrix(v)
makeCacheMatrix(v)
cacheSolve(v)
v$getinv
ls()
a$getmean
a$getmean()
v$getinv
w<-cacheSolve(v)
v
w<-makeCacheMatrix(v)
w
cacheSolve(v)
cacheSolve(w)
cacheSolve(w)
w<-makeCacheMatrix(v)
w
cacheSolve(w)
cacheMean(a)
cachemean(a)
w$getinv()
cacheSolve(w)
w$setinv
a$setmean
cacheSolve(w)
w
v
solve(v)
solve(solve(v))
v$get()
v$get
w$get
w$get()
cacheSolve()
cacheSolve(v)
v
w<-cacheSolve(v)
w$set
w$get
w$getinv
w$setinv
cacheSolve(w)
cacheSolve(v)
v
w
cacheSolve(v)
cachmean(a)
cachemean(a)
cacheSolve(v)
getinv()
$getinv()
makeCacheMatrix(v)
v
w<-makeCacheMatrix(v)
w
class(w)
makeCacheMatrix <- function(x = matrix()) {
m <- NULL		# 'm' is assigned thr NULL object, i.e. undefined
set <- function(y) {
x <<- y		# 'x' is superassigned the argument of the set function, i.e. in the global environment
m <<- NULL		# 'm' is assigned thr NULL object, i.e. undefined
}
get <- function() x				# the 'get' function returns the matrix argument of the 'makeCacheMatrix' function
setinv <- function(solve) m <<- solve	# the 'setinv' function calculates the inverse of the input matrix in the global environment
getinv <- function() m			# the 'getinv' function stores the inverse of the input matrix
matrix(data=c(set, get,setinv,getinv), nrow=2, ncol=2)			# makes a list object containing the four functions mentioned above, this is the object which the
}
w<-makeCacheMatrix(v)
w
m <- NULL		# 'm' is assigned thr NULL object, i.e. undefined
set <- function(y) {
x <<- y		# 'x' is superassigned the argument of the set function, i.e. in the global environment
m <<- NULL		# 'm' is assigned thr NULL object, i.e. undefined
}
get <- function() x				# the 'get' function returns the matrix argument of the 'makeCacheMatrix' function
setinv <- function(solve) m <<- solve	# the 'setinv' function calculates the inverse of the input matrix in the global environment
getinv <- function() m			# the 'getinv' function stores the inverse of the input matrix
matrix(data=c("set", "get","setinv","getinv"), nrow=2, ncol=2)			# makes a list object containing the four functions mentioned above, this is the object which the
}
m <- NULL		# 'm' is assigned thr NULL object, i.e. undefined
set <- function(y) {
x <<- y		# 'x' is superassigned the argument of the set function, i.e. in the global environment
m <<- NULL		# 'm' is assigned thr NULL object, i.e. undefined
}
get <- function() x				# the 'get' function returns the matrix argument of the 'makeCacheMatrix' function
setinv <- function(solve) m <<- solve	# the 'setinv' function calculates the inverse of the input matrix in the global environment
getinv <- function() m			# the 'getinv' function stores the inverse of the input matrix
matrix(data=c("set", "get","setinv","getinv"), nrow=2, ncol=2)			# makes a list object containing the four functions mentioned above, this is the object which the
}
m <- NULL		# 'm' is assigned thr NULL object, i.e. undefined
set <- function(y) {
x <<- y		# 'x' is superassigned the argument of the set function, i.e. in the global environment
m <<- NULL		# 'm' is assigned thr NULL object, i.e. undefined
}
get <- function() x				# the 'get' function returns the matrix argument of the 'makeCacheMatrix' function
setinv <- function(solve) m <<- solve	# the 'setinv' function calculates the inverse of the input matrix in the global environment
getinv <- function() m			# the 'getinv' function stores the inverse of the input matrix
matrix(data=c("set", "get","setinv","getinv"), nrow=2, ncol=2)
}
v
makeCacheMatrix
w<-makeCacheMatrix(v)
w
makeCacheMatrix <- function(x = matrix()) {
m <- NULL		# 'm' is assigned thr NULL object, i.e. undefined
set <- function(y) {
x <<- y		# 'x' is superassigned the argument of the set function, i.e. in the global environment
m <<- NULL		# 'm' is assigned thr NULL object, i.e. undefined
}
get <- function() x				# the 'get' function returns the matrix argument of the 'makeCacheMatrix' function
setinv <- function(solve) m <<- solve	# the 'setinv' function calculates the inverse of the input matrix in the global environment
getinv <- function() m			# the 'getinv' function stores the inverse of the input matrix
list(set = set, get = get,			# makes a list object containing the four functions mentioned above, this is the object which the
setinv = setinv,			# function 'makeCacheMatrix' returns
getinv = getinv)
}
w<-makeCacheMatrix(v)
w
cacheSolve <- function(x, ...) {
m <- x$getinv					# here, m is assigned the value stored by the getinv() function contained in the return value of the 								# makeCacheMatrix() function
if(!is.null(m)) {				# if the value was previously defined (i.e. not NULL), the function returns the stored value of m and exits
message("getting cached data")
return(m)
}						# otherwise, i.e. if the value of m was NULL (not defined):
data <- x$get()				# 'data' is assigned the get function
m <- solve(data, ...)			# 'm' isassigned the inverse
x$setinv(m)
m		# Return a matrix that is the inverse of 'x'
}
cachesolve(w)
cacheSolve(w)
w$getinf()
w$getinv()
w
m
ls()
rm(m)
makeCacheMatrix <- function(x = matrix()) {
m <- NULL		# 'm' is assigned thr NULL object, i.e. undefined
set <- function(y) {
x <<- y		# 'x' is superassigned the argument of the set function, i.e. in the global environment
m <<- NULL		# 'm' is assigned thr NULL object, i.e. undefined
}
get <- function() x				# the 'get' function returns the matrix argument of the 'makeCacheMatrix' function
setinv <- function(solve) m <<- solve	# the 'setinv' function calculates the inverse of the input matrix in the global environment
getinv <- function() m			# the 'getinv' function stores the inverse of the input matrix
list(set = set, get = get,			# makes a list object containing the four functions mentioned above, this is the object which the
setinv = setinv,			# function 'makeCacheMatrix' returns
getinv = getinv)
}
w<-makeCacheMatrix(v)
w
solveCache(w)
cacheSolve(w)
ls(9)
ls()
w$getinf
m <- w$getinf
m
if(!is.null(m)) {				# if the value was previously defined (i.e. not NULL), the function returns the stored value of m and exits
message("getting cached data")
return(m)
}
cacheSolve <- function(x, ...) {
m <- x$getinv					# here, m is assigned the value stored by the getinv() function contained in the return value of the 								# makeCacheMatrix() function
if(!is.null(m)) {
message("getting cached data")
return(m)
}						#
data <- x$get()
m <- solve(data, ...)
x$setinv(m)
m
}
cacheSolve(w)
m <- x$getinv
m <- w$getinv
m
w<-makeCacheMatrix(v)
cacheSolve(w)
w
cacheSolve <- function(x, ...) {
m <- x$getinv()					# here, m is assigned the value stored by the getinv() function contained in the return value of the 								# makeCacheMatrix() function
if(!is.null(m)) {
message("getting cached data")
return(m)
}						#
data <- x$get()
m <- solve(data, ...)
x$setinv(m)
m
}
cacheSolve(w)
cacheSolve(w)
rm(list=ls())
source("cachematrix.R")
v<-matrix(c(1,4,6,8), nrows=2, ncols=2)
v
help(matrix)
v<-matrix(c(1,4,6,8), nrow=2, ncol=2)
v
w<-makeCacheMatrix(v)
w
cacheSolve(w)
cacheSolve(w)
solve(cachesolve(w))
solve(cacheSolve(w))
save.image()
exit()
q()
ls()
v
w<-makeCacheMatrix(v)
cacheSolve(w)
cacheSolve(w)
